
/*	Math Functions
---------------------------------------------------------*/

@function math-pow-polyfill($number, $exp) {
	@if (round($exp) != $exp) {
		@return math-exp($exp * math-ln($number));
	}
	$value: 1;
	@if $exp > 0 {
		@for $i from 1 through $exp {
			$value: $value * $number;
		}
	}
	@else if $exp < 0 {
		@for $i from 1 through -$exp {
			$value: $value / $number;
		}
	}
	@return $value;
}

@function math-factorial($value) {
	@if $value == 0 {
		@return 1;
	}
	$result: 1;
	@for $index from 1 through $value {
		$result: $result * $index;
	}
	@return $result;
}

@function math-summation($iteratee, $input, $initial: 0, $limit: 100) {
	$sum: 0;
	@for $index from $initial to $limit {
		$sum: $sum + call(get-function($iteratee), $input, $index);
	}
	@return $sum;
}

@function math-exp-maclaurin($x, $n) {
	$result: math-pow-polyfill($x, $n) / math-factorial($n);
	@return $result;
}
@function math-exp($value) {
	$result: math-summation(math-exp-maclaurin, $value, 0, 100);
	@return $result;
}

@function math-ln-maclaurin($x, $n) {
	$result: (math-pow-polyfill(-1, $n + 1) / $n) * (math-pow-polyfill($x - 1, $n));
	@return $result;
}

@function math-ln($value) {
	$ten-exp: 1;
	$ln-ten: 2.30258509;
	@while ($value > math-pow-polyfill(10, $ten-exp)) {
		$ten-exp: $ten-exp + 1;
	}
	$value: $value / math-pow-polyfill(10, $ten-exp);
	$result: math-summation(math-ln-maclaurin, $value, 1, 100);
	@return $result + $ten-exp * $ln-ten;
}


/*	Units
---------------------------------------------------------*/

$rem-base: 16px !default;

@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

@function rem-calc($values, $base: $rem-base) {
	$rem-values: ();
	$count: length($values);
	@if $base == null {
		$base: $rem-base;
	}
	@if $count == 1 {
		@return -zf-to-rem($values, $base);
	}
	@for $i from 1 through $count {
		$rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
	}
	@return $rem-values;
}

@function -zf-bp-to-em($value) {
	@if unit($value) == 'px' or unit($value) == '' {
		$value: rem-calc($value);
	}
	@return strip-unit($value) * 1em;
}

@function -zf-to-rem($value, $base: $rem-base) {
	@if (unit($value) != 'rem') {
		$value: strip-unit($value) / strip-unit($base) * 1rem;
	}
	@if ($value == 0rem) { $value: 0; }
	@return $value;
}


/*	Values
---------------------------------------------------------*/

@function has-value($val) {
	@if $val == null or $val == none {
		@return false;
	}
	@if type-of($val) == 'number' and strip-unit($val) == 0 {
		@return false;
	}
	@if type-of($val) == 'list' and length($val) == 0 {
		@return false;
	}
	@return true;
}

@function get-side($val, $side) {
	$length: length($val);
	@if $length == 1 {
		@return $val;
	}
	@if $length == 2 {
		@return map-get((
			top: nth($val, 1),
			bottom: nth($val, 1),
			left: nth($val, 2),
			right: nth($val, 2),
		), $side);
	}
	@if $length == 3 {
		@return map-get((
			top: nth($val, 1),
			left: nth($val, 2),
			right: nth($val, 2),
			bottom: nth($val, 3),
		), $side);
	}
	@if $length == 4 {
		@return map-get((
			top: nth($val, 1),
			right: nth($val, 2),
			bottom: nth($val, 3),
			left: nth($val, 4),
		), $side);
	}
}

@function get-border-value($val, $elem) {
	@each $v in $val {
		$type: type-of($v);
		@if $elem == width and $type == 'number' {
			@return $v;
		}
		@if $elem == style and $type == 'string' {
			@return $v;
		}
		@if $elem == color and $type == 'color' {
			@return $v;
		}
	}
	$defaults: (
		width: 0,
		style: solid,
		color: #000,
	);
	@return map-get($defaults, $elem);
}

@function pow($base, $power) {
	@if $power == 0 { @return 1; }
	@return $base * pow($base, $power - 1);
}


/*	Colors
---------------------------------------------------------*/

@function luminance($color) {
	$colors: (
		'red': red($color),
		'green': green($color),
		'blue': blue($color)
	);
	@each $name, $value in $colors {
		$value: $value / 255;
		@if $value < 0.03928 {
			$value: $value / 12.92;
		} @else {
			$value: ($value + .055) / 1.055;
			$value: math-pow-polyfill($value, 2.4);
		}
		$colors: map-merge($colors, ($name: $value));
	}
	@return (map-get($colors, 'red') * .2126) + (map-get($colors, 'green') * .7152) + (map-get($colors, 'blue') * .0722);
}

@function foreground($color, $yes: $black, $no: $white, $threshold: .38) {
	@if $color == transparent {
		$color: $body-bg;
	}
	@if (luminance($color) <= $threshold) {
		@return $no;
	}
	@return $yes;
}

@function smart-scale($color, $scale: 5%, $threshold: 40%) {
	@if lightness($color) > $threshold {
		$scale: -$scale;
	}
	@return scale-color($color, $lightness: $scale);
}

@function tint($color, $weight: 50%) {
	@return mix(#fff, $color, $weight);
}

@function shade($color, $weight: 50%) {
	@return mix(#000, $color, $weight);
}


/*	Selectors
---------------------------------------------------------*/

@function text-inputs($types: ()) {
	$return: ();
	$all-types: (text, password, date, datetime, datetime-local, month, week, email, number, search, tel, time, url, color);
	@if not(has-value($types)) {
		$types: $all-types;
	}
	@each $type in $types {
		$return: append($return, unquote('[type="#{$type}"]'), comma);
	}
	@return $return;
}


/*	Breakpoints
---------------------------------------------------------*/

$breakpoints: (
	xs: $screen-xs,
	sm: $screen-sm,
	md: $screen-md,
	lg: $screen-lg
) !default;

@function breakpoint($val: small) {
	$bp: nth($val, 1);
	$bp-max: 0;
	$dir: if(length($val) > 1, nth($val, 2), up);
	$str: '';
	$named: false;

	// Orientation media queries have a unique syntax
	@if $bp == 'landscape' or $bp == 'portrait' {
		@return '(orientation: #{$bp})';
	} @else if $bp == 'retina' {
		@return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';
	}

	// Try to pull a named breakpoint out of the $breakpoints map
	@if type-of($bp) == 'string' {
		@if map-has-key($breakpoints, $bp) {
			@if $dir == 'only' or $dir == 'down' {
				$next-bp: -zf-map-next($breakpoints, $bp);
				@if $next-bp == null {
					$bp-max: null;
				} @else {
					$bp-max: $next-bp;
				}
			}
			$bp: map-get($breakpoints, $bp);
			$named: true;
		} @else {
			$bp: 0;
		}
	}

	// // Convert any pixel, rem, or unitless value to em
	// $bp: -zf-bp-to-em($bp);
	// @if $bp-max {
	// 	$bp-max: -zf-bp-to-em($bp-max) - (1/16);
	// }

	// Skip media query creation if the input is "0 up" or "0 down"
	@if $bp > 0 or $dir == 'only' {
		@if $dir == 'only' {
			@if $named == true {
				$str: $str + '(min-width: #{$bp})';
				@if $bp-max != null {
					$str: $str + ' and (max-width: #{$bp-max})';
				}
			} @else {
				@warn 'Only named media queries can have an "only" range.';
			}
		} @else if $dir == 'down' {
			$max: 0;
			@if $named {
				$max: $bp-max;
			} @else {
				$max: $bp;
			}
			$str: $str + '(max-width: #{$max})';
		} @else if strip-unit($bp) > 0 {
			$str: $str + '(min-width: #{$bp})';
		}
	}

	@return $str;
}